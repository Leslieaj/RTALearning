#the main file

from membership import *
from equivalence import *

def main():
    A = buildRTA("a.json")
    AA = buildAssistantRTA(A)
    sigma = ["a", "b"]

    AADFA = rta_to_fa(AA, "receiving")
    
    tw1 = Timedword("a", 0)
    tw2 = Timedword("b", 0)
    tws0 = [] # empty
    tws1 = [tw1] # (a,0)
    tws2 = [tw2] # (b,0)
    e0 = Element(tws0,[0])
    e1 = Element(tws1,[0])
    e2 = Element(tws2,[0])

    S = [e0]
    R = [e1,e2]
    E = []
    print("----------------------T1--------------------------")
    T1 = Table(S,R,E)
    T1.show()
    print("----------------------EA1-------------------------")
    ea1 = buildEvidenceAutomaton(T1, sigma)
    ea1.show()
    print("----------------------H1--------------------------")
    H1 = buildhypothesis(ea1, 1)
    H1.show()
    print("----------------------ctx1------------------------")
    H1DFA = rta_to_fa(H1, "receiving")
    combined_alphabet = alphabet_combine(H1DFA.timed_alphabet, AADFA.timed_alphabet)
    alphapartitions = alphabet_partitions(combined_alphabet)
    rH1DFA = fa_to_rfa(H1DFA, alphapartitions)
    rAADFA = fa_to_rfa(AADFA, alphapartitions)
    comp_rH1DFA = rfa_complement(rH1DFA)
    product1 = clean_rfa(rfa_product(comp_rH1DFA, rAADFA))
    product_rta1 = rfa_to_rta(product1)
    ctx1 = findctx(product_rta1, 1)
    print [tw.show() for tw in ctx1.tws], ctx1.value
    print("----------------------T2--------------------------")
    T2 = add_ctx(T1, ctx1.tws, AA)
    T2.show()
    print("----------------------T3--------------------------")
    T3 = make_closed(T2, sigma, AA)
    T3.show()
    print("----------------------EA2-------------------------")
    ea2 = buildEvidenceAutomaton(T3, sigma)
    ea2.show()
    print("----------------------H2--------------------------")
    H2 = buildhypothesis(ea2, 2)
    H2.show()
    print("----------------------ctx2------------------------")
    H2DFA = rta_to_fa(H2, "receiving")
    combined_alphabet = alphabet_combine(H2DFA.timed_alphabet, AADFA.timed_alphabet)
    alphapartitions = alphabet_partitions(combined_alphabet)
    rH2DFA = fa_to_rfa(H2DFA, alphapartitions)
    rAADFA = fa_to_rfa(AADFA, alphapartitions)
    comp_rAADFA = rfa_complement(rAADFA)
    product2 = clean_rfa(rfa_product(rH2DFA, comp_rAADFA))
    product_rta2 = rfa_to_rta(product2)
    ctx2 = findctx(product_rta2, 0)
    print [tw.show() for tw in ctx2.tws], ctx2.value
    print("----------------------T4--------------------------")
    T4 = add_ctx(T3, ctx2.tws, AA)
    T4.show()
    print("----------------------EA3-------------------------")
    ea3 = buildEvidenceAutomaton(T4, sigma)
    ea3.show()
    print("----------------------H3--------------------------")
    H3 = buildhypothesis(ea3, 3)
    H3.show()
    print("----------------------ctx3------------------------")
    H3DFA = rta_to_fa(H3, "receiving")
    combined_alphabet = alphabet_combine(H3DFA.timed_alphabet, AADFA.timed_alphabet)
    alphapartitions = alphabet_partitions(combined_alphabet)
    rH3DFA = fa_to_rfa(H3DFA, alphapartitions)
    rAADFA = fa_to_rfa(AADFA, alphapartitions)
    comp_rAADFA = rfa_complement(rAADFA)
    product3 = clean_rfa(rfa_product(rH3DFA, comp_rAADFA))
    product_rta3 = rfa_to_rta(product3)
    product_rta3.show()
    ctx3 = findctx(product_rta3, 0)
    print [tw.show() for tw in ctx3.tws], ctx3.value
    print("----------------------T5--------------------------")
    T5 = add_ctx(T4, ctx3.tws, AA)
    T5.show()
    print("----------------------T6--------------------------")
    T6 = make_consistent(T5, sigma, AA)
    T6.show()
    print("----------------------T7--------------------------")
    T7 = make_closed(T6, sigma, AA)
    T7.show()
    print("----------------------EA4-------------------------")
    ea4 = buildEvidenceAutomaton(T7, sigma)
    ea4.show()
    print("----------------------H4--------------------------")
    H4 = buildhypothesis(ea4, 4)
    H4.show()
    print("----------------------ctx4------------------------")
    H4DFA = rta_to_fa(H4, "receiving")
    combined_alphabet = alphabet_combine(H4DFA.timed_alphabet, AADFA.timed_alphabet)
    alphapartitions = alphabet_partitions(combined_alphabet)
    rH4DFA = fa_to_rfa(H4DFA, alphapartitions)
    rAADFA = fa_to_rfa(AADFA, alphapartitions)
    comp_rH4DFA = rfa_complement(rH4DFA)
    product4 = clean_rfa(rfa_product(comp_rH4DFA, rAADFA))
    product_rta4 = rfa_to_rta(product4)
    product_rta4.show()
    ctx4 = findctx(product_rta4, 1)
    print [tw.show() for tw in ctx4.tws], ctx4.value
    print("----------------------T8--------------------------")
    T8 = add_ctx(T7, ctx4.tws, AA)
    T8.show()
    print("----------------------EA5--------------------------")
    ea5 = buildEvidenceAutomaton(T8, sigma)
    ea5.show()
    print("----------------------H5---------------------------")
    H5 = buildhypothesis(ea5, 5)
    H5.show()
    print("----------------------ctx5-------------------------")
    H5DFA = rta_to_fa(H5, "receiving")
    combined_alphabet = alphabet_combine(H5DFA.timed_alphabet, AADFA.timed_alphabet)
    alphapartitions = alphabet_partitions(combined_alphabet)
    rH5DFA = fa_to_rfa(H5DFA, alphapartitions)
    rAADFA = fa_to_rfa(AADFA, alphapartitions)
    comp_rAADFA = rfa_complement(rAADFA)
    product5 = clean_rfa(rfa_product(rH5DFA, comp_rAADFA))
    product_rta5 = rfa_to_rta(product5)
    product_rta5.show()
    ctx5 = findctx(product_rta5, 0)
    print [tw.show() for tw in ctx5.tws], ctx5.value
    print("---------------------T9-----------------------------")
    T9 = add_ctx(T8, ctx5.tws, AA)
    T9.show()
    print("---------------------EA6---------------------------")
    ea6 = buildEvidenceAutomaton(T9, sigma)
    ea6.show()
    print("----------------------H6---------------------------")
    H6 = buildhypothesis(ea6, 6)
    H6.show()
    print("----------------------equal----------------------------")
    H6DFA = rta_to_fa(H6, "receiving")
    combined_alphabet = alphabet_combine(H6DFA.timed_alphabet, AADFA.timed_alphabet)
    alphapartitions = alphabet_partitions(combined_alphabet)
    rH6DFA = fa_to_rfa(H6DFA, alphapartitions)
    rAADFA = fa_to_rfa(AADFA, alphapartitions)
    comp_rH6DFA = rfa_complement(rH6DFA)
    comp_rAADFA = rfa_complement(rAADFA)
    product60 = clean_rfa(rfa_product(rH6DFA, comp_rAADFA))
    product_rta60 = rfa_to_rta(product60)
    product61 = clean_rfa(rfa_product(comp_rH6DFA, rAADFA))
    product_rta61 = rfa_to_rta(product61)
    print("ctx type: 0")
    product_rta60.show()
    print("ctx type: 1")
    product_rta61.show()
    return 0

if __name__=='__main__':
	main()
